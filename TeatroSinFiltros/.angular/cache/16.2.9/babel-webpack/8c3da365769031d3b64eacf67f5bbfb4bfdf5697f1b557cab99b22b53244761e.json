{"ast":null,"code":"import { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthenticationService {\n  constructor(http) {\n    this.http = http;\n    this.isLoggedIn = false;\n    this.userRole = '';\n    this.loginUrl = 'http://localhost:3000/api/login';\n  }\n  login(credentials) {\n    return this.http.post(this.loginUrl, credentials).pipe(catchError(this.handleError));\n  }\n  get isLoggedIn() {\n    return this.isLoggedIn;\n  }\n  get getUserRole() {\n    return this.userRole;\n  }\n  handleError(error) {\n    let errorMsg = 'Ocurrió un error desconocido';\n    if (error.status === 401) {\n      errorMsg = 'Contraseña incorrecta';\n    } else if (error.status === 404) {\n      errorMsg = 'Usuario no encontrado';\n    }\n    return throwError(() => new Error(errorMsg));\n  }\n  static #_ = this.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["catchError","throwError","AuthenticationService","constructor","http","isLoggedIn","userRole","loginUrl","login","credentials","post","pipe","handleError","getUserRole","error","errorMsg","status","Error","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\morit\\Downloads\\TeatroSinFiltros\\TeatroSinFiltros\\src\\app\\services\\authentication.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { catchError, throwError } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\n\n\nexport class AuthenticationService {\n  private isLoggedIn = false;\n  private userRole: string = '';\n  private loginUrl = 'http://localhost:3000/api/login'; \n\n  constructor(private http: HttpClient) {}\n\n  login(credentials: { nombre_usuario: string; contrasena: string }) {\n    return this.http.post<any>(this.loginUrl, credentials).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  get isLoggedIn(): boolean {\n    return this.isLoggedIn;\n  }\n\n  get getUserRole(): string {\n    return this.userRole;\n  }\n\n  private handleError(error: HttpErrorResponse) {\n    let errorMsg = 'Ocurrió un error desconocido';\n    if (error.status === 401) {\n      errorMsg = 'Contraseña incorrecta';\n    } else if (error.status === 404) {\n      errorMsg = 'Usuario no encontrado';\n    }\n    return throwError(() => new Error(errorMsg));\n  }\n}\n"],"mappings":"AAEA,SAASA,UAAU,EAAEC,UAAU,QAAQ,MAAM;;;AAO7C,OAAM,MAAOC,qBAAqB;EAKhCC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAJhB,KAAAC,UAAU,GAAG,KAAK;IAClB,KAAAC,QAAQ,GAAW,EAAE;IACrB,KAAAC,QAAQ,GAAG,iCAAiC;EAEb;EAEvCC,KAAKA,CAACC,WAA2D;IAC/D,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAM,IAAI,CAACH,QAAQ,EAAEE,WAAW,CAAC,CAACE,IAAI,CACzDX,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAC7B;EACH;EAEA,IAAIP,UAAUA,CAAA;IACZ,OAAO,IAAI,CAACA,UAAU;EACxB;EAEA,IAAIQ,WAAWA,CAAA;IACb,OAAO,IAAI,CAACP,QAAQ;EACtB;EAEQM,WAAWA,CAACE,KAAwB;IAC1C,IAAIC,QAAQ,GAAG,8BAA8B;IAC7C,IAAID,KAAK,CAACE,MAAM,KAAK,GAAG,EAAE;MACxBD,QAAQ,GAAG,uBAAuB;KACnC,MAAM,IAAID,KAAK,CAACE,MAAM,KAAK,GAAG,EAAE;MAC/BD,QAAQ,GAAG,uBAAuB;;IAEpC,OAAOd,UAAU,CAAC,MAAM,IAAIgB,KAAK,CAACF,QAAQ,CAAC,CAAC;EAC9C;EAAC,QAAAG,CAAA,G;qBA7BUhB,qBAAqB,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAArBrB,qBAAqB;IAAAsB,OAAA,EAArBtB,qBAAqB,CAAAuB,IAAA;IAAAC,UAAA,EAJpB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}